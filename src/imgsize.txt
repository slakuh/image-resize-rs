
#[derive(Debug)]
struct ImgSize {
    width: u32,
    height: u32,
}

enum Resize {
    // samo æe poveæati sliku
    Increase,
    // samo æe smanjiti sliku
    Decrease,
    // poveæat ili umanjit sliku na željenu velièinu
    Eather,
    // neæe mijenjati veliæinu slike
    Neather,
}

impl ImgSize {
    
    fn new(width: u32, height: u32) -> ImgSize
    {
        ImgSize{width: width, height: height}
    }
    
    fn resize_to_width(&mut self, new_width: u32,  rsz_type: Resize)
    {
        let calc_new_size;// = false;
        match rsz_type {
            Resize::Increase => calc_new_size = self.width < new_width,                
            Resize::Decrease => calc_new_size =  self.width > new_width,
            Resize::Eather => calc_new_size = true,
            Resize::Neather => calc_new_size = false,
        }
            //_ => println!("NE DIRAJ"),
            if calc_new_size
            {
                self.height = new_width * self.height / self.width;
                self.width = new_width;
            }        
    }
    
    fn resize_to_height(&mut self, new_height: u32, rsz_type: Resize)
    {
        let calc_new_size;// = false;

        match rsz_type {
            Resize::Increase => calc_new_size = self.height < new_height,
            Resize::Decrease => calc_new_size = self.height > new_height,
            Resize::Eather => calc_new_size = true,    
            Resize::Neather => calc_new_size = false,                   
        }

	    if calc_new_size
	    {
            self.width = new_height * self.width / self.height;
            self.height = new_height;
        }
    }
}




fn main() {
    let mut s = ImgSize::new(32,16);
    s.resize_to_width(20, Resize::Decrease);
    println!("{:?}", s);
    s.resize_to_width(60, Resize::Increase);
    println!("{:?}", s);
    s.resize_to_height(13, Resize::Decrease);
    println!("{:?}", s);
    s.resize_to_height(99, Resize::Increase);
    println!("{:?}", s);
}